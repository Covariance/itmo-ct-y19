// Code generated by GOSPOD parser generator. DO NOT EDIT.

package parser

import (
	"fmt"
	"regexp"
)

type {{ .Name }}Lexer struct {
	input    string
	pos      int
	curToken Token
}

func NewLexer(input string) {{ .Name }}Lexer {
    lex := {{ .Name }}Lexer{
        input: input,
        pos : 0,
    }

    return lex
}

type TokenKind int

const (
	{{ range $Token := .Tokens }}
	{{ $Token.Kind }} TokenKind = iota
	{{ end }}END TokenKind = iota
)

func (r TokenKind) String() string {
    {{ range $Token := .Tokens }}
    if r == {{ $Token.Kind }} {
        return "{{ $Token.Kind }}"
    }
    {{ end }}
    return "END"
}

type Token struct {
	kind  TokenKind
	value string
}

func (r *Token) GetValue() string {
    return r.value
}

type TokenPattern struct {
	kind    TokenKind
	pattern *regexp.Regexp
}

var WHITESPACE = regexp.MustCompile("^\\s")

var ORDER = []TokenPattern{
	{{ range $Token := .Tokens }}
	{kind: {{ $Token.Kind }}, pattern: regexp.MustCompile("^{{ $Token.Regex }}")},
	{{ end }}
}

func (r *{{ .Name }}Lexer) Current() Token {
	return r.curToken
}

func (r *{{ .Name }}Lexer) HasNext() bool {
	return r.curToken.kind != END
}

func (r *{{ .Name }}Lexer) MatchRegex(regex *regexp.Regexp) *string {
	if r.pos == len(r.input) {
		return nil
	}

	pos := regex.FindStringIndex(r.input[r.pos:])
	if len(pos) == 0 {
		return nil
	}

	result := r.input[r.pos : r.pos+pos[1]]
	r.pos += pos[1]

	return &result
}

func (r *{{ .Name }}Lexer) NextToken() (Token, error) {
	if r.pos == len(r.input) {
		r.curToken = Token{
			kind:  END,
			value: "",
		}
		return r.curToken, nil
	}

	_ = r.MatchRegex(WHITESPACE)

	for _, pattern := range ORDER {
		if parsed := r.MatchRegex(pattern.pattern); parsed != nil {
			r.curToken = Token{
				kind:  pattern.kind,
				value: *parsed,
			}
			return r.curToken, nil
		}
	}

	return Token{}, fmt.Errorf("unable to parse input: illegal character at position %d", r.pos)
}
