// Code generated by GOSPOD parser generator. DO NOT EDIT.

package parser

import "fmt"

type {{ .Name }}Parser struct {
	lexer {{ .Name }}Lexer
}

func (r *{{ .Name }}Parser) Parse() (Tree, error) {
	_, err := r.lexer.NextToken()
	if err != nil {
		return nil, fmt.Errorf("unable to get token from lexer: %w", err)
	}

	res, err := r.{{ .Start }}()
	if err != nil {
		return nil, fmt.Errorf("unable to parse input: %w", err)
	}

	if r.lexer.Current().kind != END {
		return nil, fmt.Errorf("expecting end of input, got: %s", r.lexer.Current().kind.String())
	}

	return &res, nil
}

{{ range $t := .Types }}
type {{ $t.Name }}Tree struct {
    BaseTree
    {{ range $tt := $t.Params }}
    {{ $tt.Name }} {{ $tt.Type }}
    {{ end }}
}
{{ end }}

{{ range $np := .Parsers }}
func (r *{{ $.Name }}Parser) {{ $np.Name }}(
{{ range $param := $np.Params }}
    {{ $param.Name }} {{ $param.Type }},
{{ end }}
) ({{ $np.Name }}Tree, error) {
    res := {{ $np.Name }}Tree{
        BaseTree: BaseTree{Node: "{{ $np.Name }}"},
    }

    token := r.lexer.Current()

    switch token.kind {
        {{ range $case := $np.Cases }}
        case {{ StringsJoin $case.Kinds ", " }}:
            {{ $case.Text }}
        {{ end }}
        default:
            return {{ $np.Name }}Tree{}, fmt.Errorf("expected one of [ {{ range $case := $np.Cases }}{{ StringsJoin $case.Kinds "  " }} {{ end }}], got: %s", token.kind.String())
    }

    return res, nil
}
{{ end }}
